/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * The cats API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { CreateProductBodyRequest, CreateProductResponse } from "../model";
import { createInstance } from "../api-instance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const productControllerCreate = (
  createProductBodyRequest: CreateProductBodyRequest,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CreateProductResponse>(
    {
      url: `/product`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createProductBodyRequest,
    },
    options,
  );
};

export const getProductControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productControllerCreate>>,
    TError,
    { data: CreateProductBodyRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productControllerCreate>>,
  TError,
  { data: CreateProductBodyRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productControllerCreate>>,
    { data: CreateProductBodyRequest }
  > = (props) => {
    const { data } = props ?? {};

    return productControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof productControllerCreate>>
>;
export type ProductControllerCreateMutationBody = CreateProductBodyRequest;
export type ProductControllerCreateMutationError = unknown;

export const useProductControllerCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productControllerCreate>>,
    TError,
    { data: CreateProductBodyRequest },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof productControllerCreate>>,
  TError,
  { data: CreateProductBodyRequest },
  TContext
> => {
  const mutationOptions = getProductControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const productControllerGetAll = (
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal,
) => {
  return createInstance<CreateProductResponse[]>(
    { url: `/product`, method: "GET", signal },
    options,
  );
};

export const getProductControllerGetAllQueryKey = () => {
  return [`/product`] as const;
};

export const getProductControllerGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof productControllerGetAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productControllerGetAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getProductControllerGetAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof productControllerGetAll>>
  > = ({ signal }) => productControllerGetAll(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof productControllerGetAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ProductControllerGetAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof productControllerGetAll>>
>;
export type ProductControllerGetAllQueryError = unknown;

export function useProductControllerGetAll<
  TData = Awaited<ReturnType<typeof productControllerGetAll>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productControllerGetAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof productControllerGetAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof createInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductControllerGetAll<
  TData = Awaited<ReturnType<typeof productControllerGetAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productControllerGetAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof productControllerGetAll>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProductControllerGetAll<
  TData = Awaited<ReturnType<typeof productControllerGetAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productControllerGetAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProductControllerGetAll<
  TData = Awaited<ReturnType<typeof productControllerGetAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof productControllerGetAll>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getProductControllerGetAllQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const productControllerDelete = (
  id: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/product/${id}`, method: "DELETE" },
    options,
  );
};

export const getProductControllerDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productControllerDelete>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof productControllerDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof productControllerDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return productControllerDelete(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ProductControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof productControllerDelete>>
>;

export type ProductControllerDeleteMutationError = unknown;

export const useProductControllerDelete = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof productControllerDelete>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof createInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof productControllerDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getProductControllerDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
