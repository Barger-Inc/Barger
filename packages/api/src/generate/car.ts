/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * The cats API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"
import type { CarResponse, CreateCarBodyRequest } from "../model"
import { createInstance } from "../api-instance"

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const carControllerCreate = (
  createCarBodyRequest: CreateCarBodyRequest,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<CarResponse>(
    {
      url: `/car`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCarBodyRequest,
    },
    options
  )
}

export const getCarControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof carControllerCreate>>,
    TError,
    { data: CreateCarBodyRequest },
    TContext
  >
  request?: SecondParameter<typeof createInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof carControllerCreate>>,
  TError,
  { data: CreateCarBodyRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof carControllerCreate>>,
    { data: CreateCarBodyRequest }
  > = (props) => {
    const { data } = props ?? {}

    return carControllerCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CarControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof carControllerCreate>>
>
export type CarControllerCreateMutationBody = CreateCarBodyRequest
export type CarControllerCreateMutationError = unknown

export const useCarControllerCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof carControllerCreate>>,
    TError,
    { data: CreateCarBodyRequest },
    TContext
  >
  request?: SecondParameter<typeof createInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof carControllerCreate>>,
  TError,
  { data: CreateCarBodyRequest },
  TContext
> => {
  const mutationOptions = getCarControllerCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
export const carControllerGetAll = (
  options?: SecondParameter<typeof createInstance>,
  signal?: AbortSignal
) => {
  return createInstance<CarResponse[]>(
    { url: `/car`, method: "GET", signal },
    options
  )
}

export const getCarControllerGetAllQueryKey = () => {
  return [`/car`] as const
}

export const getCarControllerGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof carControllerGetAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof carControllerGetAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof createInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCarControllerGetAllQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof carControllerGetAll>>
  > = ({ signal }) => carControllerGetAll(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof carControllerGetAll>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type CarControllerGetAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof carControllerGetAll>>
>
export type CarControllerGetAllQueryError = unknown

export function useCarControllerGetAll<
  TData = Awaited<ReturnType<typeof carControllerGetAll>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof carControllerGetAll>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof carControllerGetAll>>,
        TError,
        TData
      >,
      "initialData"
    >
  request?: SecondParameter<typeof createInstance>
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCarControllerGetAll<
  TData = Awaited<ReturnType<typeof carControllerGetAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof carControllerGetAll>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof carControllerGetAll>>,
        TError,
        TData
      >,
      "initialData"
    >
  request?: SecondParameter<typeof createInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useCarControllerGetAll<
  TData = Awaited<ReturnType<typeof carControllerGetAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof carControllerGetAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof createInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useCarControllerGetAll<
  TData = Awaited<ReturnType<typeof carControllerGetAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof carControllerGetAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof createInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getCarControllerGetAllQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const carControllerDelete = (
  id: number,
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<number>(
    { url: `/car/${id}`, method: "DELETE" },
    options
  )
}

export const getCarControllerDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof carControllerDelete>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof createInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof carControllerDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof carControllerDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {}

    return carControllerDelete(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CarControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof carControllerDelete>>
>

export type CarControllerDeleteMutationError = unknown

export const useCarControllerDelete = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof carControllerDelete>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof createInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof carControllerDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getCarControllerDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}
