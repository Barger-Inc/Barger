/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * The cats API description
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query"
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query"
import { createInstance } from "../api-instance"

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const orderManagementControllerCreateOrderManagement = (
  options?: SecondParameter<typeof createInstance>
) => {
  return createInstance<number>(
    { url: `/order-management`, method: "POST" },
    options
  )
}

export const getOrderManagementControllerCreateOrderManagementMutationOptions =
  <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof orderManagementControllerCreateOrderManagement>
      >,
      TError,
      void,
      TContext
    >
    request?: SecondParameter<typeof createInstance>
  }): UseMutationOptions<
    Awaited<ReturnType<typeof orderManagementControllerCreateOrderManagement>>,
    TError,
    void,
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } = options ?? {}

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof orderManagementControllerCreateOrderManagement>
      >,
      void
    > = () => {
      return orderManagementControllerCreateOrderManagement(requestOptions)
    }

    return { mutationFn, ...mutationOptions }
  }

export type OrderManagementControllerCreateOrderManagementMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof orderManagementControllerCreateOrderManagement>>
  >

export type OrderManagementControllerCreateOrderManagementMutationError =
  unknown

export const useOrderManagementControllerCreateOrderManagement = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof orderManagementControllerCreateOrderManagement>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof createInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof orderManagementControllerCreateOrderManagement>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getOrderManagementControllerCreateOrderManagementMutationOptions(options)

  return useMutation(mutationOptions)
}
